/**
 * main.cpp
 *
 * Displays various particle effects generated by our engine.
 *
 * Author: Mark Willson
 * Author: Kevin Jacobson
 */

#include "main.h"
#include "bloodparticlesystem.h"

using namespace pengine;

GLsizei winWidth = 400, winHeight = 400;
GLuint blood, fireworks, displayNum;
int curTime,prevTime;
real dTime;

BloodParticleSystem bloodSystem;








int main(int argc, char **argv)
{
    glutInit(&argc,argv);
    glutInitDisplayMode(GLUT_RGBA | GLUT_DOUBLE);
    glutInitWindowPosition(0,0);
    glutInitWindowSize(winWidth,winHeight);
    glutCreateWindow("Group 8 Project");


    glutMouseFunc(mymouse);
    glutReshapeFunc(myreshape);
    glutDisplayFunc(mydisplay);
    init();
    glutMainLoop();

    return 0;
}

void init() {
   
    glClearColor(1.0, 1.0, 1.0, 1.0);
    glMatrixMode(GL_PROJECTION);
    gluOrtho2D(0.0, winWidth, 0.0, winHeight);
    bloodSystem = pengine::BloodParticleSystem(Vector3(winWidth/2,winHeight/2,0),
            Vector3(0,0,-10000000),
            Vector3(winWidth,winHeight,10000000),
            20);
           
    /*
    blood = glGenLists(1);
    glNewList(blood,GL_COMPILE);
        bloodanimation();
    glEndList();

    //fireworks
    fireworks = glGenLists(1);
    glNewList(fireworks,GL_COMPILE);
        fireworksanimation();
    glEndList();
     */

    prevTime = glutGet(GLUT_ELAPSED_TIME);

}//init

void bloodanimation() {
    curTime = glutGet(GLUT_ELAPSED_TIME);
    dTime = (real)((curTime-prevTime)/1000.0);
    bloodSystem.updateSystem(dTime+.0001);
    bloodSystem.drawParticles();
    prevTime = curTime;

}

void fireworksanimation() {

}

void mydisplay() {

    glClear(GL_COLOR_BUFFER_BIT);
/*
    switch(displayNum) {
    //Blood
    case 1:
        glCallList(blood);
        break;
    //Fireworks
    case 2:
        glCallList(fireworks);
        break;
    default:
        break;
    }
*/
    bloodanimation();
    glFlush();
    glutSwapBuffers();
    glutPostRedisplay();
    int i;
    for(i=0;i<10000;i++){}

}//mydisplay

void mymouse(int button, int state, int x, int y) {
/*
    if(state == GLUT_UP) {
        displayNum++;
        glutPostRedisplay();
    }
 */

}//mymouse

void myreshape(int width, int height) {

    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(0.0, GLdouble(width), 0.0, GLdouble(height));
    winWidth = width;
    winHeight = height;
    glClear(GL_COLOR_BUFFER_BIT);

}//myreshape

